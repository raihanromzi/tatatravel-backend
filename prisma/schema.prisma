generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  roleId    Int
  fullName  String   @db.VarChar(255)
  userName  String   @unique @db.VarChar(30)
  avatar    String?  @db.VarChar(255)
  email     String   @unique @db.VarChar(255)
  password  String   @db.VarChar(255)
  isActive  Boolean  @default(true)
  token     String?  @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  role Role   @relation(fields: [roleId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  blog Blog[]

  @@index([userName])
  @@map("users")
}

model Role {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  user User[]

  @@map("roles")
}

model Category {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  blog      Blog[]

  @@map("categories")
}

model Blog {
  id         Int         @id @default(autoincrement())
  userId     Int
  categoryId Int
  title      String      @db.VarChar(255)
  imgHead    String      @db.VarChar(255)
  slug       String      @unique @db.VarChar(100)
  desc       String?     @db.VarChar(255)
  content    String      @db.LongText
  isActive   Boolean     @default(true)
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @default(now()) @updatedAt
  imgDetail  BlogImage[]

  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  category Category @relation(fields: [categoryId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@index([slug])
  @@map("blogs")
}

model Area {
  id        Int       @id @default(autoincrement())
  name      String    @db.VarChar(100)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now()) @updatedAt
  countries Country[]

  @@map("areas")
}

// Indonesia, Malaysia, Singapore, Thailand
model Country {
  id        Int      @id @default(autoincrement())
  name      String   @db.VarChar(100)
  areaId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  area        Area          @relation(fields: [areaId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  TourCountry TourCountry[]

  @@map("countries")
}

model Tour {
  id          Int           @id @default(autoincrement())
  imgHead     String        @db.VarChar(255)
  name        String        @db.VarChar(255)
  price       String        @db.VarChar(255)
  dateStart   Int           @db.Int
  dateEnd     Int           @db.Int
  duration    Int           @db.Int
  desc        String?       @db.VarChar(255)
  isActive    Boolean       @default(true)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @default(now()) @updatedAt
  TourCountry TourCountry[]
  imgDetail   TourImage[]
  Place       Place[]

  @@index([name])
  @@map("tours")
}

// Place tour (tour detail) -> malaysia, singapore, thailand
model Place {
  id        Int      @id @default(autoincrement())
  tourId    Int
  name      String   @db.VarChar(100)
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  tour Tour @relation(fields: [tourId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@map("places")
}

model TourCountry {
  id        Int      @id @default(autoincrement())
  tourId    Int
  countryId Int
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  tour    Tour    @relation(fields: [tourId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  country Country @relation(fields: [countryId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@map("tour_countries")
}

model TourImage {
  id        Int      @id @default(autoincrement())
  tourId    Int
  image     String   @db.VarChar(255)
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  tour Tour @relation(fields: [tourId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@map("tour_images")
}

model BlogImage {
  id        Int      @id @default(autoincrement())
  blogId    Int
  image     String   @db.VarChar(255)
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  blog Blog @relation(fields: [blogId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@map("blog_images")
}
